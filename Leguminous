#!/usr/bin/env perl
# Leguminous is Copyright (C) 2010, Marco Fontani <MFONTANI@cpan.org>.
# This program is free software; you can redistribute it and/or
# modify it under the terms of the Artistic License 2.0.
# This program is distributed in the hope that it will be
# useful, but it is provided "as is" and without any express
# or implied warranties. For details, see the full text of
# the license at the following URL:
# http://www.opensource.org/licenses/artistic-license-2.0.php
# Prism JS and CSS are instead provided under the MIT license,
# available at https://github.com/PrismJS/prism/blob/master/LICENSE

package Leguminous::View;
use base qw( Pod::POM::View::HTML );

# Originally this did not link anything
sub view_seq_link_transform_path {
    my ( $self, $page ) = @_;
    if ( $page eq uc $page ) {    # all uppercase is section inside page
        my $sanitized_page = $page;
        $sanitized_page =~ s/\W//g;
        return "#__$sanitized_page";
    }
    return qq{/$page};
}

# originally this wrapped the content's presentation in <html>, unneeded
sub view_pod {
    my ( $self, $pod ) = @_;
    return $pod->content->present($self);
}

# changed to provide a name= tag
sub view_head1 {
    my ( $self, $head1 ) = @_;
    my $title           = $head1->title->present($self);
    my $sanitized_title = $title;
    $sanitized_title =~ s/\W//g;
    return "<h1><a name=\"__$sanitized_title\">$title</a></h1>\n\n" . $head1->content->present($self);
}

sub view_head2 {
    my ( $self, $head2 ) = @_;
    my $title           = $head2->title->present($self);
    my $sanitized_title = $title;
    $sanitized_title =~ s/\W//g;
    return "<h2><a name=\"__$sanitized_title\">$title</a></h2>\n\n" . $head2->content->present($self);
}

# have no need for head3..head5 for now

# Ensure <pre> wraps a <code> to make prism.js work
sub view_verbatim {
    my ($self, $text) = @_;
    for ($text) {
        s/&/&amp;/g;
        s/</&lt;/g;
        s/>/&gt;/g;
    }
    # Kill "stray" two- or four- spaces at the beginning of the blocks
    if ($text =~ m!\A[ ]{2}\S!xms) {
        $text =~ s!^[ ]{2}!!xmsg;
    } elsif ($text =~ m!\A[ ]{4}\S!xms) {
        $text =~ s!^[ ]{4}!!xmsg;
    }
    return "<pre><code class=lang-perl>$text</code></pre>\n\n";
}

# ...and that a <code> is set to lang-perl
sub view_seq_code {
    my ($self, $text) = @_;
    return "<code class=lang-perl>$text</code>";
}


package Leguminous::TOC;
use base qw( Pod::POM::View::HTML );

sub view_pod {
    my ( $self, $pod ) = @_;
    my $content = $pod->content->present($self);
    return $content;
}

## head1 and head2 sections should just be nested LIs
## FIXME slightly broken as it creates unnecessary nested ul/lis
sub view_head1 {
    my ( $self, $head1 ) = @_;
    my $title           = $head1->title->present($self);
    my $sanitized_title = $title;
    $sanitized_title =~ s/\W//g;
    return
        "<li><a href=\"#__$sanitized_title\">$title</a>\n<ul>\n"
      . $head1->content->present($self)
      . "</ul></li>\n";
}

sub view_head2 {
    my ( $self, $head2 ) = @_;
    my $title           = $head2->title->present($self);
    my $sanitized_title = $title;
    $sanitized_title =~ s/\W//g;
    return "<li><a href=\"#__$sanitized_title\">$title</a>\n" . $head2->content->present($self) . "</li>\n";
}

# make several sections return ''; basically all but headN should return ''
sub view_head3     { '' }
sub view_head4     { '' }
sub view_head5     { '' }
sub view_over      { '' }
sub view_item      { '' }
sub view_for       { '' }
sub view_begin     { '' }
sub view_end       { '' }
sub view_textblock { '' }
sub view_verbatim  { '' }

package main;
use Mojolicious::Lite;
use Pod::POM;
use File::Find::Rule;

sub module_directories {
    return grep { -d $_ } '.', './lib', grep { !ref $_ } @INC;
}

get '/' => sub {
    my $self = shift;
    $self->render(
        template => 'index',
        title    => '',
    );
};

get '/q' => sub {
    my $self   = shift;
    my $module = $self->param('term');
    return $self->render(template => 'space', title => 'Error') if $module =~ /\s/;
    my @hits;
    for my $dir ( module_directories() ) {
        next if ref $dir;
        my @files = File::Find::Rule->file->name('*.pod', '*.pm')->relative->in($dir);
        foreach my $f (@files) {
            next if $f =~ /^site_perl/;
            next if $f =~ /^5\./;
            $f =~ s{\.(pod|pm)$}{};
            $f =~ s{/}{::}g;
            if ($f =~ m{$module}i) {
                push @hits, $f;
            }
        }
    }
    $self->render(
        template => 'list',
        hits     => \@hits,
        hitcount => scalar(@hits),
        title    => $module,
    );
};

get '/:module' => sub {
    my $self   = shift;
    my $module = $self->param('module');
    my $file   = _get_filename_for_module($module)
      or return $self->render( template => '404', module => $module, title => 'Error' );
    my $parser  = Pod::POM->new;
    my $pom     = $parser->parse_file($file);
    my $pomhtml = Leguminous::View->print($pom);
    my $pomtoc  = Leguminous::TOC->print($pom);
    $self->render(
        template => 'pod',
        pomhtml  => $pomhtml,
        pomtoc   => $pomtoc,
        filename => $file,
        title    => $module,
        module   => $module,
        empty    => $pomhtml =~ /^\s*$/g ? 1 : 0,
    );
};

sub _get_filename_for_module {
    my $module      = shift;
    my $mod_slashes = $module;
    $mod_slashes =~ s!::!/!g;
    for my $prefix ( module_directories() ) {
        next if ref $prefix;
        my $curfile = $prefix . '/' . $mod_slashes;
        return $curfile if -f $curfile;
        $curfile =~ s/$/\.pod/;
        return $curfile if -f $curfile;
        $curfile =~ s/pod$/pm/;
        return $curfile if -f $curfile;
    }
    # spec case for then Leguminous is launched from another cwd
    return __FILE__ if $module eq 'Leguminous';
    return;
}

# vim:expandtab
# vim:tabstop=4

app->start;
__DATA__

@@ 404.html.ep
% layout 'html5';
<h1>Ach!</h1>
<div class="error">
    POD for module <code><%= $module %></code> was not found.
</div>

@@ space.html.ep
% layout 'html5';
We cannot handle spaces in the search term.

@@ list.html.ep
% layout 'html5';
% if ($hitcount) {
<ul>
% for my $file (@$hits) {
<li><a href="/<%= $file %>"><%= $file %></a>
% }
</ul>
% } else {
No modules found.
% }


@@ index.html.ep
% layout 'html5';
<h1>Leguminous</h1>
<div>Welcome to the Leguminous POD viewer.</div>
Go to <code>/Module::Name</code> to see its POD.
For example try <a href="/Mojolicious">Mojolicious</a> or 
<a href="/Mojolicious::Lite">Mojolicious::Lite</a> or even
<a href="/Leguminous">Leguminous</a> to read the documentation
of this service.
<div>
<form action="/q">
<input name="term">
<input type="submit" value="Search">
</form>
</div>

@@ pod.html.ep
% layout 'html5';
<div id="title">POD for <code><%= $module %></code> from <code><%= $filename %></code></div>
<div style="height:20px;"></div>
<div id="toc"><%== $pomtoc %></div>
<div id="pom">
% if ($empty) {
<div style="height:20px;"></div>
<div id="nopod">This module has no POD :(</div>
% }
<%== $pomhtml %>
</div>

@@ layouts/html5.html.ep
<!doctype html>
<html>
<head>
    <title><%= $title %><%= ' Â· ' if $title %>Leguminous</title>
    <style>
    body { margin: 0px; padding: 0px; margin-left: 5px; margin-right: 5px; }
    #title { height:25px; width:100%; text-align:center; background-color:#eeeebb; position: fixed; top: 0px; }
    #pom { width: 800px; margin: auto; }
    #toc { font-size: 75%; position:fixed; background-color: #EEE; right: 0px; top: 25px; }
    #toc ul { margin: 0px; padding: 0px; margin-top: 5px; margin-bottom: 5px; }
    #toc li { list-style-type: none; padding-left: 15px; padding-right: 5px; }
    #logo { text-align: center; font-size: 60%; position:fixed; right: 2px; top: 1px; z-index: 9;}
    </style>
    <link rel=stylesheet href=/prism.css>
</head>
<body>
    <div id="logo">Powered by <a href="http://github.com/mfontani/Leguminous">Leguminous</a> | <a href="/">home</a></div>
    <%== content %>
    <script src=/prism.js></script>
</body>
</html>

@@ prism.js
/* PrismJS 1.16.0
https://prismjs.com/download.html#themes=prism-tomorrow&languages=perl */
var _self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(g){var c=/\blang(?:uage)?-([\w-]+)\b/i,a=0,C={manual:g.Prism&&g.Prism.manual,disableWorkerMessageHandler:g.Prism&&g.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof M?new M(e.type,C.util.encode(e.content),e.alias):Array.isArray(e)?e.map(C.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++a}),e.__id},clone:function n(e,t){var r,a,i=C.util.type(e);switch(t=t||{},i){case"Object":if(a=C.util.objId(e),t[a])return t[a];for(var l in r={},t[a]=r,e)e.hasOwnProperty(l)&&(r[l]=n(e[l],t));return r;case"Array":return a=C.util.objId(e),t[a]?t[a]:(r=[],t[a]=r,e.forEach(function(e,a){r[a]=n(e,t)}),r);default:return e}}},languages:{extend:function(e,a){var n=C.util.clone(C.languages[e]);for(var t in a)n[t]=a[t];return n},insertBefore:function(n,e,a,t){var r=(t=t||C.languages)[n],i={};for(var l in r)if(r.hasOwnProperty(l)){if(l==e)for(var o in a)a.hasOwnProperty(o)&&(i[o]=a[o]);a.hasOwnProperty(l)||(i[l]=r[l])}var s=t[n];return t[n]=i,C.languages.DFS(C.languages,function(e,a){a===s&&e!=n&&(this[e]=i)}),i},DFS:function e(a,n,t,r){r=r||{};var i=C.util.objId;for(var l in a)if(a.hasOwnProperty(l)){n.call(a,l,a[l],t||l);var o=a[l],s=C.util.type(o);"Object"!==s||r[i(o)]?"Array"!==s||r[i(o)]||(r[i(o)]=!0,e(o,n,l,r)):(r[i(o)]=!0,e(o,n,null,r))}}},plugins:{},highlightAll:function(e,a){C.highlightAllUnder(document,e,a)},highlightAllUnder:function(e,a,n){var t={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};C.hooks.run("before-highlightall",t);for(var r,i=t.elements||e.querySelectorAll(t.selector),l=0;r=i[l++];)C.highlightElement(r,!0===a,t.callback)},highlightElement:function(e,a,n){for(var t,r="none",i=e;i&&!c.test(i.className);)i=i.parentNode;i&&(r=(i.className.match(c)||[,"none"])[1].toLowerCase(),t=C.languages[r]),e.className=e.className.replace(c,"").replace(/\s+/g," ")+" language-"+r,e.parentNode&&(i=e.parentNode,/pre/i.test(i.nodeName)&&(i.className=i.className.replace(c,"").replace(/\s+/g," ")+" language-"+r));var l={element:e,language:r,grammar:t,code:e.textContent},o=function(e){l.highlightedCode=e,C.hooks.run("before-insert",l),l.element.innerHTML=l.highlightedCode,C.hooks.run("after-highlight",l),C.hooks.run("complete",l),n&&n.call(l.element)};if(C.hooks.run("before-sanity-check",l),l.code)if(C.hooks.run("before-highlight",l),l.grammar)if(a&&g.Worker){var s=new Worker(C.filename);s.onmessage=function(e){o(e.data)},s.postMessage(JSON.stringify({language:l.language,code:l.code,immediateClose:!0}))}else o(C.highlight(l.code,l.grammar,l.language));else o(C.util.encode(l.code));else C.hooks.run("complete",l)},highlight:function(e,a,n){var t={code:e,grammar:a,language:n};return C.hooks.run("before-tokenize",t),t.tokens=C.tokenize(t.code,t.grammar),C.hooks.run("after-tokenize",t),M.stringify(C.util.encode(t.tokens),t.language)},matchGrammar:function(e,a,n,t,r,i,l){for(var o in n)if(n.hasOwnProperty(o)&&n[o]){if(o==l)return;var s=n[o];s="Array"===C.util.type(s)?s:[s];for(var g=0;g<s.length;++g){var c=s[g],u=c.inside,h=!!c.lookbehind,f=!!c.greedy,d=0,m=c.alias;if(f&&!c.pattern.global){var p=c.pattern.toString().match(/[imuy]*$/)[0];c.pattern=RegExp(c.pattern.source,p+"g")}c=c.pattern||c;for(var y=t,v=r;y<a.length;v+=a[y].length,++y){var k=a[y];if(a.length>e.length)return;if(!(k instanceof M)){if(f&&y!=a.length-1){if(c.lastIndex=v,!(x=c.exec(e)))break;for(var b=x.index+(h?x[1].length:0),w=x.index+x[0].length,A=y,P=v,O=a.length;A<O&&(P<w||!a[A].type&&!a[A-1].greedy);++A)(P+=a[A].length)<=b&&(++y,v=P);if(a[y]instanceof M)continue;N=A-y,k=e.slice(v,P),x.index-=v}else{c.lastIndex=0;var x=c.exec(k),N=1}if(x){h&&(d=x[1]?x[1].length:0);w=(b=x.index+d)+(x=x[0].slice(d)).length;var j=k.slice(0,b),S=k.slice(w),E=[y,N];j&&(++y,v+=j.length,E.push(j));var _=new M(o,u?C.tokenize(x,u):x,m,x,f);if(E.push(_),S&&E.push(S),Array.prototype.splice.apply(a,E),1!=N&&C.matchGrammar(e,a,n,y,v,!0,o),i)break}else if(i)break}}}}},tokenize:function(e,a){var n=[e],t=a.rest;if(t){for(var r in t)a[r]=t[r];delete a.rest}return C.matchGrammar(e,n,a,0,0,!1),n},hooks:{all:{},add:function(e,a){var n=C.hooks.all;n[e]=n[e]||[],n[e].push(a)},run:function(e,a){var n=C.hooks.all[e];if(n&&n.length)for(var t,r=0;t=n[r++];)t(a)}},Token:M};function M(e,a,n,t,r){this.type=e,this.content=a,this.alias=n,this.length=0|(t||"").length,this.greedy=!!r}if(g.Prism=C,M.stringify=function(e,a){if("string"==typeof e)return e;if(Array.isArray(e))return e.map(function(e){return M.stringify(e,a)}).join("");var n={type:e.type,content:M.stringify(e.content,a),tag:"span",classes:["token",e.type],attributes:{},language:a};if(e.alias){var t=Array.isArray(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(n.classes,t)}C.hooks.run("wrap",n);var r=Object.keys(n.attributes).map(function(e){return e+'="'+(n.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+n.tag+' class="'+n.classes.join(" ")+'"'+(r?" "+r:"")+">"+n.content+"</"+n.tag+">"},!g.document)return g.addEventListener&&(C.disableWorkerMessageHandler||g.addEventListener("message",function(e){var a=JSON.parse(e.data),n=a.language,t=a.code,r=a.immediateClose;g.postMessage(C.highlight(t,C.languages[n],n)),r&&g.close()},!1)),C;var e=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return e&&(C.filename=e.src,C.manual||e.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(C.highlightAll):window.setTimeout(C.highlightAll,16):document.addEventListener("DOMContentLoaded",C.highlightAll))),C}(_self);"undefined"!=typeof module&&module.exports&&(module.exports=Prism),"undefined"!=typeof global&&(global.Prism=Prism);
Prism.languages.perl={comment:[{pattern:/(^\s*)=\w+[\s\S]*?=cut.*/m,lookbehind:!0},{pattern:/(^|[^\\$])#.*/,lookbehind:!0}],string:[{pattern:/\b(?:q|qq|qx|qw)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s+([a-zA-Z0-9])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*\((?:[^()\\]|\\[\s\S])*\)/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*\{(?:[^{}\\]|\\[\s\S])*\}/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*\[(?:[^[\]\\]|\\[\s\S])*\]/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*<(?:[^<>\\]|\\[\s\S])*>/,greedy:!0},{pattern:/("|`)(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0},{pattern:/'(?:[^'\\\r\n]|\\.)*'/,greedy:!0}],regex:[{pattern:/\b(?:m|qr)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s+([a-zA-Z0-9])(?:(?!\1)[^\\]|\\[\s\S])*\1[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngc]*/,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s+([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*\((?:[^()\\]|\\[\s\S])*\)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*\{(?:[^{}\\]|\\[\s\S])*\}\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*\[(?:[^[\]\\]|\\[\s\S])*\]\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*<(?:[^<>\\]|\\[\s\S])*>\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\b))/,greedy:!0}],variable:[/[&*$@%]\{\^[A-Z]+\}/,/[&*$@%]\^[A-Z_]/,/[&*$@%]#?(?=\{)/,/[&*$@%]#?(?:(?:::)*'?(?!\d)[\w$]+)+(?:::)*/i,/[&*$@%]\d+/,/(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/],filehandle:{pattern:/<(?![<=])\S*>|\b_\b/,alias:"symbol"},vstring:{pattern:/v\d+(?:\.\d+)*|\d+(?:\.\d+){2,}/,alias:"string"},function:{pattern:/sub [a-z0-9_]+/i,inside:{keyword:/sub/}},keyword:/\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\b/,number:/\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\d(?:_?\d)*)?\.?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)\b/,operator:/-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\b/,punctuation:/[{}[\];(),:]/};

@@ prism.css
/* PrismJS 1.16.0
https://prismjs.com/download.html#themes=prism-tomorrow&languages=perl */
/**
 * prism.js tomorrow night eighties for JavaScript, CoffeeScript, CSS and HTML
 * Based on https://github.com/chriskempson/tomorrow-theme
 * @author Rose Pritchard
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #ccc;
  background: none;
  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
  font-size: 1em;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.5;

  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;

}

/* Code blocks */
pre[class*="language-"] {
  padding: 1em;
  margin: .5em 0;
  overflow: auto;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
  background: #2d2d2d;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
}

.token.comment,
.token.block-comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: #999;
}

.token.punctuation {
  color: #ccc;
}

.token.tag,
.token.attr-name,
.token.namespace,
.token.deleted {
  color: #e2777a;
}

.token.function-name {
  color: #6196cc;
}

.token.boolean,
.token.number,
.token.function {
  color: #f08d49;
}

.token.property,
.token.class-name,
.token.constant,
.token.symbol {
  color: #f8c555;
}

.token.selector,
.token.important,
.token.atrule,
.token.keyword,
.token.builtin {
  color: #cc99cd;
}

.token.string,
.token.char,
.token.attr-value,
.token.regex,
.token.variable {
  color: #7ec699;
}

.token.operator,
.token.entity,
.token.url {
  color: #67cdcc;
}

.token.important,
.token.bold {
  font-weight: bold;
}
.token.italic {
  font-style: italic;
}

.token.entity {
  cursor: help;
}

.token.inserted {
  color: green;
}


__END__

=head1 NAME

Leguminous - See the POD for the current directory on the web

=head1 USAGE

    cd /where/your/modules/are

    Leguminous daemon --listen http://127.0.0.1:1234
    Leguminous fastcgi
    Leguminous daemon_prefork --listen http://127.0.0.1:1234 \
        --minspare 2 --maxspare 10 --servers 5

Searchs the directory it's launched, lib/, and the whole of C<@INC> for files.
Checks .pod before .pm.

=head1 COPYRIGHT

Leguminous is Copyright (C) 2010,2013 Marco Fontani L<MFONTANI@cpan.org>.

=head1 CONTRIBUTORS

Gabor Szabo L<szabgab@gmail.com>

=head1 LICENSE

This program is free software; you can redistribute it and/or
modify it under the terms of the Artistic License 2.0.
This program is distributed in the hope that it will be
useful, but it is provided "as is" and without any express
or implied warranties. For details, see the full text of
the license at the following URL:
L<http://www.opensource.org/licenses/artistic-license-2.0.php>

=head1 SEE ALSO

L<Mojolicious::Lite>
L<Pod::POM>
L<Pod::POM::View::HTML>

=cut
